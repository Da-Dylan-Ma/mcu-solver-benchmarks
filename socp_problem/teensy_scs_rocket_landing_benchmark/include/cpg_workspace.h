
/*
Auto-generated by CVXPYgen on February 18, 2024 at 20:35:19.
Content: Type definitions and variable declarations.
*/

#include "scs.h"

#ifndef CPG_TYPES_H
# define CPG_TYPES_H

typedef scs_float cpg_float;
typedef scs_int cpg_int;

// Compressed sparse column matrix
typedef struct {
  cpg_int      *p;
  cpg_int      *i;
  cpg_float    *x;
} cpg_csc;

// Canonical parameters
typedef struct {
  cpg_csc        *P;         // Canonical parameter P
  cpg_float    *c;         // Canonical parameter c
  cpg_float    d;          // Canonical parameter d
  cpg_csc        *A;         // Canonical parameter A
  cpg_float    *b;         // Canonical parameter b
} Canon_Params_t;

// Flags indicating outdated canonical parameters
typedef struct {
  int        P;          // Bool, if canonical parameter P outdated
  int        c;          // Bool, if canonical parameter c outdated
  int        d;          // Bool, if canonical parameter d outdated
  int        A;          // Bool, if canonical parameter A outdated
  int        b;          // Bool, if canonical parameter b outdated
} Canon_Outdated_t;

// Primal solution
typedef struct {
  cpg_float    *var1;      // Your variable var1
} CPG_Prim_t;

// Dual solution
typedef struct {
  cpg_float    *d0;        // Your dual variable for constraint d0
  cpg_float    *d1;        // Your dual variable for constraint d1
  cpg_float    *d2;        // Your dual variable for constraint d2
  cpg_float    *d3;        // Your dual variable for constraint d3
  cpg_float    *d4;        // Your dual variable for constraint d4
  cpg_float    *d5;        // Your dual variable for constraint d5
  cpg_float    *d6;        // Your dual variable for constraint d6
  cpg_float    *d7;        // Your dual variable for constraint d7
  cpg_float    *d8;        // Your dual variable for constraint d8
  cpg_float    d9;         // Your dual variable for constraint d9
  cpg_float    d10;        // Your dual variable for constraint d10
  cpg_float    d11;        // Your dual variable for constraint d11
  cpg_float    d12;        // Your dual variable for constraint d12
  cpg_float    d13;        // Your dual variable for constraint d13
  cpg_float    d14;        // Your dual variable for constraint d14
  cpg_float    d15;        // Your dual variable for constraint d15
  cpg_float    d16;        // Your dual variable for constraint d16
  cpg_float    d17;        // Your dual variable for constraint d17
  cpg_float    *d18;       // Your dual variable for constraint d18
  cpg_float    *d19;       // Your dual variable for constraint d19
  cpg_float    *d20;       // Your dual variable for constraint d20
  cpg_float    *d21;       // Your dual variable for constraint d21
  cpg_float    *d22;       // Your dual variable for constraint d22
  cpg_float    *d23;       // Your dual variable for constraint d23
  cpg_float    *d24;       // Your dual variable for constraint d24
  cpg_float    *d25;       // Your dual variable for constraint d25
  cpg_float    *d26;       // Your dual variable for constraint d26
  cpg_float    *d27;       // Your dual variable for constraint d27
  cpg_float    *d28;       // Your dual variable for constraint d28
  cpg_float    *d29;       // Your dual variable for constraint d29
  cpg_float    *d30;       // Your dual variable for constraint d30
  cpg_float    *d31;       // Your dual variable for constraint d31
  cpg_float    *d32;       // Your dual variable for constraint d32
  cpg_float    *d33;       // Your dual variable for constraint d33
  cpg_float    *d34;       // Your dual variable for constraint d34
  cpg_float    *d35;       // Your dual variable for constraint d35
} CPG_Dual_t;

// Solver information
typedef struct {
  cpg_float    obj_val;    // Objective function value
  cpg_int      iter;       // Number of iterations
  char       *status;     // Solver status
  cpg_float    pri_res;    // Primal residual
  cpg_float    dua_res;    // Dual residual
} CPG_Info_t;

// Solution and solver information
typedef struct {
  CPG_Prim_t *prim;      // Primal solution
  CPG_Dual_t *dual;      // Dual solution
  CPG_Info_t *info;      // Solver info
} CPG_Result_t;

// Solver settings
typedef struct {
  cpg_int    normalize;
  cpg_float  scale;
  cpg_int    adaptive_scale;
  cpg_float  rho_x;
  cpg_int    max_iters;
  cpg_float  eps_abs;
  cpg_float  eps_rel;
  cpg_float  eps_infeas;
  cpg_float  alpha;
  cpg_float  time_limit_secs;
  cpg_int    verbose;
  cpg_int    warm_start;
  cpg_int    acceleration_lookback;
  cpg_int    acceleration_interval;
  const char*write_data_filename;
  const char*log_csv_filename;
} Canon_Settings_t;

#endif // ifndef CPG_TYPES_H

// Vector containing flattened user-defined parameters
extern cpg_float cpg_params_vec[7657];

// Sparse mappings from user-defined to canonical parameters
extern cpg_csc canon_c_map;
extern cpg_csc canon_A_map;

// Canonical parameters
extern cpg_csc canon_P;
extern cpg_float canon_c[183];
extern cpg_csc canon_A;
extern cpg_float canon_b[231];

// Struct containing canonical parameters
extern Canon_Params_t Canon_Params;

// Struct containing flags for outdated canonical parameters
extern Canon_Outdated_t Canon_Outdated;

// Struct containing primal solution
extern CPG_Prim_t CPG_Prim;

// Struct containing dual solution
extern CPG_Dual_t CPG_Dual;

// Struct containing solver info
extern CPG_Info_t CPG_Info;

// Struct containing solution and info
extern CPG_Result_t CPG_Result;

// SCS matrix P
extern ScsMatrix scs_P;

// SCS matrix A
extern ScsMatrix scs_A;

// Struct containing SCS data
extern ScsData Scs_D;

// SCS array of SOC dimensions
extern cpg_int scs_q[9];

// Struct containing SCS cone data
extern ScsCone Scs_K;

// Struct containing SCS settings
extern ScsSettings Canon_Settings;

// SCS solution
extern cpg_float scs_x[183];
extern cpg_float scs_y[231];
extern cpg_float scs_s[231];

// Struct containing SCS solution
extern ScsSolution Scs_Sol;

// Struct containing SCS information
extern ScsInfo Scs_Info;

// Pointer to struct containing SCS workspace
extern ScsWork* Scs_Work;
